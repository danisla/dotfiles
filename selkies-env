#!/bin/bash

export CYAN='\033[1;36m'
export GREEN='\033[1;32m'
export RED='\033[1;31m'
export NC='\033[0m' # No Color
function log_cyan() { echo -e "${CYAN}$@${NC}"; }
function log_green() { echo -e "${GREEN}$@${NC}"; }
function log_red() { echo -e "${RED}$@${NC}"; }

export SELKIES_REPO_DIR=${SELKIES_REPO_DIR:-${HOME}/project/selkies}

alias selkies-cli="${SELKIES_REPO_DIR}/setup/scripts/selkies_cli.sh"

###
# Helper function to display list of selkies parsed clusters.
###
function _selkies_select_cluster() {
  IFS=';' read -ra clusters <<< "$(kubectx | grep '_broker-' | sed -e 's/^gke_//g' -e 's/_broker-.*//g' | sort | tr '\n' ';')"
  local count=1
  for i in ${clusters[@]}; do
    IFS="_" read -ra TOKS <<< "${i}"
    echo "  $count) ${TOKS[0]} (${TOKS[1]})" >&2
    ((count=count+1))
  done
  local sel=0
  while [[ $sel -lt 1 || $sel -ge $count ]]; do
    read -p "Select a Selkies deployment: " sel >&2
  done
  echo "${clusters[(sel-1)]}"
}

###
# Helper function to run cloud build based on available kube contexts
###
function selkies-deploy() {
    cluster=$(_selkies_select_cluster)
    IFS="_" read -ra TOKS <<< "${cluster}"
    project=${TOKS[0]}
    region=${TOKS[1]}
    log_cyan "Running cloud build in $(pwd), --project=$project --substitutions=_REGION=$region,$@"
    gcloud builds submit --project $project --substitutions=_REGION=$region,$@
}

###
# Helper function to run selkies cloud build tasks on multiple projects and regions
###
function selkies-env() {
    local project_prep=false
    local build_images=false
    local base_tf=false
    local deploy_cluster=false
    local wi_sa=false
    local deploy_private_cluster=false
    local deploy_node_pool_apps=false
    local deploy_node_pool_gpu=false
    local deploy_manifests=false

    local action="apply"
    local project_id=""
    local region=""

    [[ $# -eq 0 ]] && log_cyan "USAGE: selkies-env [<prep|images|base|cluster|private-cluster|wi-sa|node-pool-apps|node-pool-gpu|manifests] [-p <project id>] [-r <region>] [-a <plan|apply|destroy>]" && return 1

    while (( "$#" )); do
        case ${1,,} in
            "-p")
                shift
                project_id=$1
                ;;
            "-r")
                shift
                region=$1
                ;;
            "-a")
                shift
                action=$1
                ;;
            "prep") project_prep=true ;;
            "images") build_images=true ;;
            "base") base_tf=true ;;
            "cluster") deploy_cluster=true ;;
            "private-cluster") deploy_private_cluster=true ;;
            "wi-sa") wi_sa=true ;;
            "node-pool-apps") deploy_node_pool_apps=true ;;
            "node-pool-gpu") deploy_node_pool_gpu=true ;;
            "manifests") deploy_manifests=true ;;            
            *) log_red "ERROR: Invalid argument '$1'" && return 1 ;;
        esac
        shift
    done

    if [[ -z "${project_id}" ]]; then
        log_cyan "INFO: Fetching project ID"
        project_id=$(gcloud config get-value project 2>/dev/null)
        [[ -z "${project_id}" ]] && log_red "ERROR: no project set" && return 1
        log_cyan "INFO: using project: ${project_id}"
    fi

    if [[ ${project_prep} == true ]]; then
        log_cyan "INFO: Enabling services and configuring service accounts for project: ${project_id}"
        gcloud services enable --project ${project_id?} \
            cloudresourcemanager.googleapis.com \
            compute.googleapis.com \
            container.googleapis.com \
            cloudbuild.googleapis.com \
            servicemanagement.googleapis.com \
            serviceusage.googleapis.com \
            stackdriver.googleapis.com \
            secretmanager.googleapis.com \
            iap.googleapis.com
        [[ $? -ne 0 ]] && log_red "ERROR: failed to enable services" && return 1

        CLOUDBUILD_SA=$(gcloud projects describe ${project_id?} --format='value(projectNumber)')@cloudbuild.gserviceaccount.com && \
        (
            gcloud projects add-iam-policy-binding ${project_id?} --member serviceAccount:${CLOUDBUILD_SA?} --role roles/owner && \
            gcloud projects add-iam-policy-binding ${project_id?} --member serviceAccount:${CLOUDBUILD_SA?} --role roles/iam.serviceAccountTokenCreator
        )
        [[ $? -ne 0 ]] && log_red "ERROR: failed to configure cloud build service account" && return 1
    fi

    if [[ ${build_images} == true ]]; then
        log_cyan "INFO: Building images"
        (
            cd ${SELKIES_REPO_DIR}/images
            gcloud builds submit --project ${project_id}
        )
        [[ $? -ne 0 ]] && log_red "ERROR: failed to build images" && return 1
    fi

    if [[ ${base_tf} == true ]]; then
        log_cyan "INFO: ${action} base infra"
        (
            cd ${SELKIES_REPO_DIR}/setup/infra
            gcloud builds submit --project ${project_id} --substitutions=_ACTION=${action}
        )
        [[ $? -ne 0 ]] && log_red "ERROR: failed to ${action} base infra" && return 1
    fi

    if [[ ${deploy_cluster} == true ]]; then
        [[ -z "${region}" ]] && log_red "ERROR: missing region" && return 1
        log_cyan "INFO: ${action} cluster to ${region}"
        (
            cd ${SELKIES_REPO_DIR}/setup/infra/cluster
            gcloud builds submit --project ${project_id} --substitutions=_REGION=${region},_ACTION=${action}
        )
        [[ $? -ne 0 ]] && log_red "ERROR: failed to ${action} cluster to ${region}" && return 1
    elif [[ ${deploy_private_cluster} == true ]]; then
        [[ -z "${region}" ]] && log_red "ERROR: missing region" && return 1
        log_cyan "INFO: ${action} private-cluster to ${region}"
        (
            cd ${SELKIES_REPO_DIR}/setup/infra/private-cluster
            gcloud builds submit --project ${project_id} --substitutions=_REGION=${region},_ACTION=${action}
        )
        [[ $? -ne 0 ]] && log_red "ERROR: failed to ${action} private-cluster to ${region}" && return 1
    fi

    if [[ ${wi_sa} == true ]]; then
        log_cyan "INFO: ${action} workload identity service accounts (wi-sa) to project ${project_id}"
        (
            cd ${SELKIES_REPO_DIR}/setup/infra/wi-sa
            gcloud builds submit --project ${project_id} --substitutions=_ACTION=${action}
        )
        [[ $? -ne 0 ]] && log_red "ERROR: failed to ${action} workload identity service accounts" && return 1
    fi

    if [[ ${deploy_node_pool_apps} == true ]]; then
        [[ -z "${region}" ]] && log_red "ERROR: missing region" && return 1
        log_cyan "INFO: ${action} node-pool-apps to ${region}"
        (
            cd ${SELKIES_REPO_DIR}/setup/infra/node-pool-apps
            gcloud builds submit --project ${project_id} --substitutions=_REGION=${region},_ACTION=${action}
        )
        [[ $? -ne 0 ]] && log_red "ERROR: failed to ${action} node-pool-apps to ${region}" && return 1
    fi

    if [[ ${deploy_node_pool_gpu} == true ]]; then
        [[ -z "${region}" ]] && log_red "ERROR: missing region" && return 1
        log_cyan "INFO: ${action} node-pool-gpu to ${region}"
        (
            cd ${SELKIES_REPO_DIR}/setup/infra/node-pool-gpu
            gcloud builds submit --project ${project_id} --substitutions=_REGION=${region},_ACTION=${action}
        )
        [[ $? -ne 0 ]] && log_red "ERROR: failed to ${action} node-pool-gpu to ${region}" && return 1
    fi

    if [[ ${deploy_manifests} == true ]]; then
        [[ -z "${region}" ]] && log_red "ERROR: missing region" && return 1
        log_cyan "INFO: deploying manifests to ${region}"
        (
            cd ${SELKIES_REPO_DIR}/setup/manifests
            gcloud builds submit --project ${project_id} --substitutions=_REGION=${region}
        )
        [[ $? -ne 0 ]] && log_red "ERROR: failed to deploy manifests to ${region}" && return 1
    fi
}

###
# Helper function for local development of pod-broker controller
###
function pod-broker() {
    local build=false
    local push=false
    local deploy=false
    local project_id=""
    local deploy_region=""
    local component="controller"

    [[ $# -eq 0 ]] && log_cyan "USAGE: pod-broker <build|push|deploy-REGION> [-p <project id>] [-c <controller|web>]" && return 1

    while (( "$#" )); do
        case ${1,,} in
            "build") build=true ;;
            "push") push=true ;;
            deploy-*)
                deploy=true
                deploy_region=${1/deploy-/}
                ;;
            "-p")
                shift
                project_id=$1
                ;;
            "-c")
                shift
                component=${1,,}
                [[ ! "${component}" =~ controller|web ]] && log_red "ERROR: invalid component, must be one of: controller,web" && return 1
                ;;
            *) log_red "ERROR: Invalid argument '$1', USAGE: pod-broker <build|push|deploy-REGION> [-p <project id>]" && return 1 ;;
        esac
        shift
    done

    if [[ -z "${project_id}" ]]; then
        log_cyan "INFO: Fetching project ID"
        project_id=$(gcloud config get-value project 2>/dev/null)
        [[ -z "${project_id}" ]] && log_red "ERROR: no project set" && return 1
        log_cyan "INFO: using project: ${project_id}"
    fi

    local image="gcr.io/${project_id}/kube-pod-broker-${component}:latest"

    if [[ ${build} == true ]]; then
        log_cyan "INFO: Building ${component} image: ${image}"
        (
            cd ${SELKIES_REPO_DIR}/images/${component} && \
            docker build -t ${image} .
        )
        [[ $? -ne 0 ]] && log_red "ERROR: docker build failed" && return 1
    fi

    if [[ ${push} == true ]]; then
        log_cyan "INFO: pushing image to registry"
        docker push ${image}
        [[ $? -ne 0 ]] && log_red "ERROR: docker push failed" && return 1
    fi

    if [[ ${deploy} == true ]]; then
        ctx="gke_${project_id}_${deploy_region}_broker-${deploy_region}"
        if ! kubectx | grep -q $ctx; then
            log_red "ERROR: kubectx not found: $ctx, run 'gke-credentials -p' to fetch context"
            return 1
        fi
        digest="$(gcr-get-digest $image)"
        log_cyan "INFO: deploying updated ${component} with digest $digest to region: ${deploy_region}"

        # Update pod-broker statefulset
        curr_yaml=$(kubectl --context $ctx --namespace pod-broker-system get statefulset pod-broker -o yaml)
        echo "$curr_yaml" | sed -e "s|image: gcr.io/${project_id}/kube-pod-broker-${component}.*|image: gcr.io/${project_id}/kube-pod-broker-${component}@${digest}|g" | \
            kubectl --context $ctx apply -f -
        [[ $? -ne 0 ]] && log_red "ERROR: pod-broker deployment failed" && return 1
        
        # Update image-puller daemonset
        curr_yaml=$(kubectl --context $ctx --namespace pod-broker-system get daemonset pod-broker-image-puller -o yaml)
        echo "$curr_yaml" | sed -e "s|image: gcr.io/${project_id}/kube-pod-broker-${component}.*|image: gcr.io/${project_id}/kube-pod-broker-${component}@${digest}|g" | \
            kubectl --context $ctx apply -f -
        [[ $? -ne 0 ]] && log_red "ERROR: image-puller deployment failed" && return 1
    fi
}